######################################################################
#
# Use with a command like
#   cmake -S . -B build/Debug -D CMAKE_BUILD_TYPE=Debug
#   cmake --build build/Debug

##############################

set (CMAKE_CXX_STANDARD 20)

# set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address,undefined -fno-sanitize=leak -DBOOST_USE_ASAN")

add_compile_options(-UNDEBUG)

##############################

SET(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.81.0 REQUIRED COMPONENTS context coroutine system log log_setup iostreams fiber program_options)
include_directories(${Boost_INCLUDE_DIRS})

##############################

set(OPENSSL_USE_STATIC_LIBS TRUE)
find_package(OpenSSL 3 REQUIRED)

##############################

SET(Protobuf_USE_STATIC_LIBS ON)
find_package(Protobuf REQUIRED)

include_directories(${Protobuf_INCLUDE_DIRS})

##############################

if(EXISTS "${CMAKE_CURRENT_BINARY_DIR}/Christians-Steam-Framework")
   include_directories("${CMAKE_CURRENT_BINARY_DIR}/Christians-Steam-Framework")
endif()

##############################

if(EXISTS "${CMAKE_SOURCE_DIR}/Christians-Steam-Framework/Headers")
   include_directories("${CMAKE_SOURCE_DIR}/Christians-Steam-Framework/Headers")
endif()

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/Headers")
   include_directories("${CMAKE_CURRENT_SOURCE_DIR}/Headers")
endif()

##############################

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-psabi")	#  -fsanitize=address

# https://stackoverflow.com/questions/2368811/how-to-set-warning-level-in-cmake
# -Wnull-dereference seems to mostly annoying and/or bugged, so I'm not adding it for now
set(WarningOptions "-Wall -Wextra -Wpedantic -Werror -Wformat=2 -Wformat-overflow=2 -Wformat-signedness -Wswitch-default -Wuninitialized -Wduplicated-branches -Wfloat-equal -Wshadow -Wcast-qual -Wcast-align -Wsign-conversion -Wlogical-op -Wmissing-declarations")
# -Wconversion -Wnrvo
# target_compile_options(${PROJECT_NAME} PUBLIC ${WarningOptions})

target_compile_features(${PROJECT_NAME} PUBLIC cxx_std_20)

target_link_libraries(${PROJECT_NAME} pthread systemd ${Boost_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${Protobuf_LIBRARIES})
target_link_libraries(${PROJECT_NAME} ${OPENSSL_LIBRARIES})
target_link_libraries(${PROJECT_NAME} atomic)
